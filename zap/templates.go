// Code generated by go-bindata.
// sources:
// templates/502.tmpl
// templates/app.tmpl
// templates/layout.tmpl
// DO NOT EDIT!

package zap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates502Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x7b\x34\x6b\x61\x54\x62\x81\x82\xae\x82\xa9\x81\x91\x82\x53\x62\x8a\x82\x7b\x62\x49\x6a\x79\x62\xa5\x8d\x7e\x86\xa1\x1d\x17\x97\x4d\x81\x5d\x75\xb5\x5e\x6d\xad\x8d\x7e\x81\x1d\x17\x20\x00\x00\xff\xff\x33\x67\x2b\x86\x30\x00\x00\x00")

func templates502TmplBytes() ([]byte, error) {
	return bindataRead(
		_templates502Tmpl,
		"templates/502.tmpl",
	)
}

func templates502Tmpl() (*asset, error) {
	bytes, err := templates502TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/502.tmpl", size: 48, mode: os.FileMode(420), modTime: time.Unix(1506366261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcd\xae\xd3\x30\x10\x85\xf7\x79\x8a\xc1\x8b\xab\x44\x2a\x4e\x8b\x60\x43\xe3\x2c\x40\x57\x14\xa9\x77\x03\x5d\x20\x76\x26\x99\x26\x86\xd4\x36\xf6\xb8\x3f\x54\x7d\x11\x76\xbc\x1a\x4f\x82\x9c\x34\xa1\xfc\xe8\x66\x11\x39\xf6\x9c\xcf\x67\xce\xa4\x68\x17\xe5\xcf\xef\x3f\x3e\x4a\x0b\x4f\xe1\x7c\x06\xfe\xda\xe8\xad\x6a\xf8\xca\x78\x82\xcb\xa5\xc8\xdb\x45\x99\x24\x85\x2d\xdf\x93\xa4\xe0\x5f\xf6\x35\xc3\xba\x3f\xb6\xfd\xa9\x43\x50\xb5\x60\x9d\x69\x58\xc9\x39\x2f\x72\xeb\x30\x1e\xf8\xca\x29\x4b\x40\x27\x8b\x82\x11\x1e\x29\xff\x2c\xf7\x72\xd8\x65\x65\x02\xb0\x97\x0e\xfc\x40\x13\xc0\xfe\x60\xb3\x65\x92\x00\xa8\x2d\xa4\xd7\x82\x27\x02\x98\x0b\x5a\x2b\xdd\xb0\x0c\xce\x09\x00\x80\x47\xda\xa8\x1d\x9a\x40\xe9\x36\xe8\x8a\x94\xd1\x69\x76\x3e\x28\x5d\x9b\x03\xef\x4c\x25\xe3\x0e\x77\xd8\x19\x59\xa7\x8b\x6c\x79\x99\xc1\xb3\xf9\x7c\x9e\x2d\x13\x80\x4b\xe4\x8f\x2a\xd8\x22\x55\x6d\xfa\x38\xb7\x41\x4a\x59\xfe\x4d\xda\x3c\x76\x3a\x83\x60\x6b\x49\xb8\x36\x4d\x0f\x7e\xf1\x5f\xee\x54\x93\xd6\x92\xe4\xc8\xaf\x4d\x15\x76\xa8\x89\x37\x48\xf7\x1d\xc6\xe5\xab\xd3\xdb\x3a\xed\x23\xcc\xb8\xd2\x1a\xdd\x6a\xf3\xb0\x06\x01\x51\xb6\xec\x45\x57\x8b\xff\xde\x11\x7d\x05\xd7\xcd\xa0\x92\x5d\xf7\x49\x56\x5f\xb2\xe1\x96\x98\xee\x71\xd7\xb5\x44\x76\x20\x5c\x3f\x40\x80\xc6\x03\x7c\x78\x58\xaf\x88\xec\x3b\xfc\x1a\xd0\xd3\x00\x9e\x6a\xb8\xd1\x0e\x65\x7d\x8a\xe1\x63\xd5\x4a\xdd\x20\x08\xb8\x09\xa3\x2f\x1e\x06\x34\x4a\x7a\x41\x1c\x20\x82\x10\xf0\x1c\xee\xee\x26\xda\x38\x64\x11\xf3\x9f\xc4\xf1\x19\x3d\xdf\x50\xbc\x35\xda\xe3\x06\x8f\x74\xf5\x14\x1b\xfe\xfd\x9e\x1c\x5a\xd4\x29\x7b\x73\xbf\x89\xa3\x88\xed\x93\x0b\xf8\x57\x17\x1e\x75\x7d\x1b\xd9\x18\x61\x91\x0f\x7f\x61\x99\xfc\x0a\x00\x00\xff\xff\xaf\x85\x9a\xcf\x02\x03\x00\x00")

func templatesAppTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppTmpl,
		"templates/app.tmpl",
	)
}

func templatesAppTmpl() (*asset, error) {
	bytes, err := templatesAppTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app.tmpl", size: 770, mode: os.FileMode(420), modTime: time.Unix(1506371974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6e\xeb\x20\x10\x87\xf7\x39\x05\xd2\xdb\xe2\x38\xfe\xf3\x22\xc7\x46\xb9\x41\x2f\xd0\x1d\x36\x63\x83\x0a\x8c\x05\xa4\x89\x65\xf9\x22\xdd\xf5\x6a\x3d\x49\x95\x10\x37\x59\xb4\xbb\x19\x7e\x9f\xe0\x63\x86\xc9\x60\xf4\x71\x43\x08\x93\xc0\xc5\xb5\x20\x84\x05\x15\x34\x1c\xbf\x3e\x3e\x5f\xf9\xc8\xd2\xd8\xc5\xc4\x87\x69\xad\x09\x69\x51\x4c\x73\x8f\x36\xd4\x59\x35\x5e\xd2\x6c\x5b\x12\x3f\xf9\x00\x26\x39\x29\xea\xb9\xf5\x89\x07\xa7\xfa\xc6\x70\x37\x28\x5b\xf3\x53\xc0\xc6\xf0\x4b\x72\x56\x22\xc8\x7a\xbf\x03\xb3\x3c\xdd\x44\x47\x07\xf3\xc8\x85\x50\x76\xa8\xb3\x47\x26\x33\x2a\x73\x2a\x0b\x2a\x4b\x2a\xff\x53\xb9\x9f\xb5\xb2\x90\x48\x50\x83\x0c\xb5\x45\x67\xb8\x5e\xd9\xd1\x01\xed\x50\x40\xb4\xda\x56\x60\xc8\x0b\x5a\xde\x21\x35\x68\xd1\x8f\xbc\x83\x06\xdf\xc1\xf5\x1a\xcf\xc9\xe5\x66\xb4\x6c\x9e\x7f\xd3\xf2\xee\x6d\x70\x78\xb2\x22\xe9\x50\xa3\xab\xff\x65\x45\x5e\x14\x55\x73\xef\xda\xb6\x3b\x88\xc3\xdf\x6a\x77\xac\xef\xfb\x95\xe1\x8f\xb3\x2e\x2f\xfb\x27\xd3\xdf\x1e\xdb\xe7\x55\xb9\x8b\x0c\x4b\x7f\x86\xcd\xd2\x75\x39\xec\x6a\x19\xe7\x3f\xcf\x64\x52\xa0\x05\x59\x96\x1b\x12\x13\x96\xc6\x85\x7e\x07\x00\x00\xff\xff\xd5\xf3\x06\xda\xd8\x01\x00\x00")

func templatesLayoutTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTmpl,
		"templates/layout.tmpl",
	)
}

func templatesLayoutTmpl() (*asset, error) {
	bytes, err := templatesLayoutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tmpl", size: 472, mode: os.FileMode(420), modTime: time.Unix(1506353636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/502.tmpl": templates502Tmpl,
	"templates/app.tmpl": templatesAppTmpl,
	"templates/layout.tmpl": templatesLayoutTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"502.tmpl": &bintree{templates502Tmpl, map[string]*bintree{}},
		"app.tmpl": &bintree{templatesAppTmpl, map[string]*bintree{}},
		"layout.tmpl": &bintree{templatesLayoutTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

