// Code generated by go-bindata.
// sources:
// templates/502.html
// templates/app.html
// templates/layout.html
// DO NOT EDIT!

package zap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates502Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x7b\x34\x6b\x61\x54\x62\x81\x82\xae\x82\xa9\x81\x91\x82\x53\x62\x8a\x82\x7b\x62\x49\x6a\x79\x62\xa5\x8d\x7e\x86\xa1\x1d\x17\x97\x4d\x81\x5d\x75\xb5\x5e\x6d\xad\x8d\x7e\x81\x1d\x17\x20\x00\x00\xff\xff\x33\x67\x2b\x86\x30\x00\x00\x00")

func templates502HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates502Html,
		"templates/502.html",
	)
}

func templates502Html() (*asset, error) {
	bytes, err := templates502HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/502.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1506372716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcb\x8e\xd3\x40\x10\xbc\xfb\x2b\x0a\x1f\x56\x4e\x14\xec\x2c\x82\x0b\xb1\x2d\x04\x5a\x11\x50\x16\x24\x36\x07\xc4\x6d\xb0\x3b\x8e\xc1\x19\x0f\x33\xed\x25\x21\xca\x8f\x70\xe3\xd7\xf8\x12\x34\xe3\xc7\xc6\xbb\x08\x71\x89\x32\x53\x5d\xdd\x55\xd5\xe3\x78\x7b\x99\xfe\xfe\xf9\xeb\x93\x50\x78\x8c\xe3\x11\xe1\xab\x5a\x6e\xca\x22\x5c\xd6\x86\x71\x3a\xc5\xd1\xf6\x32\xf5\xbc\x58\xa5\x37\x2c\xb8\x31\xcf\x11\x1b\x25\x24\xca\x3c\xf1\x8d\xbb\xf1\x53\xcb\x6a\x51\x47\xb0\x78\x1a\x47\xca\xd1\x34\xb9\xd2\xaa\x2e\xfc\x34\x0c\xc3\x38\x52\x9a\x2c\x60\x32\x5d\x2a\x06\x1f\x14\x25\x3e\xd3\x9e\xa3\x2f\xe2\x56\xb4\xb7\x7e\xea\x01\xd1\x74\x8a\x17\x16\x3e\x1a\xd6\xa5\x2c\x4e\x98\x4e\x23\x0f\xb8\x15\x1a\xed\x60\x24\xf0\x47\xa3\xfd\x85\xe7\x01\x9b\x46\x66\x5c\xd6\x12\x1b\xe2\x6c\xbb\xaa\x8b\x60\x82\xa3\x07\x00\x86\x78\x5d\xee\xa8\x6e\x38\x18\x8a\x2c\x88\x82\x38\xf0\xa3\x1f\x42\x45\x56\xe7\x0c\x8d\xca\x05\xd3\xaa\x2e\x26\x0b\x9c\x66\x78\x36\x9f\x4f\x16\x1e\x70\x1a\xb5\x1f\x8a\x82\x5c\xb0\xe8\x67\xe4\x75\xd6\xec\x48\x72\x58\x10\x5f\x55\x64\xff\xbe\x3c\xbc\xc9\x03\x97\xc0\x24\x2c\xa5\x24\xbd\x5c\x5f\xaf\x90\xc0\xd2\x16\x8e\x74\xa7\xf4\xe1\x18\x87\x59\x8b\x34\xf8\x28\x37\x08\xba\x08\x1e\x25\xf0\x75\x23\x65\x29\x0b\xbf\x87\xff\xcb\xa8\xe5\xd3\x60\xd5\xf5\x6f\xcd\x3e\x99\x77\x6e\xad\x90\xbf\x7b\x6e\xd5\x8c\x5c\x0b\x16\x48\xf0\xf6\xe6\xfd\xbb\x50\x09\x6d\x3a\xb4\x6d\x33\x6c\xcb\xde\x85\xed\x69\xf1\xef\xb0\xba\x97\x35\xce\xeb\x9c\x79\x9e\xca\xc3\xcc\xac\xcd\x46\x57\x33\x64\xa2\xaa\x3e\x8b\xec\x6b\xaf\xd3\x3e\x9e\xfd\xae\xda\x32\xab\xb6\x4f\x77\x40\x02\x49\xdf\xf1\xf1\x7a\xb5\x64\x56\x1f\xe8\x5b\x43\x86\x83\xc9\xa8\x26\xac\xa5\x26\x91\x1f\x5c\x72\xd9\x56\xc8\x82\x90\x60\x94\x6f\x17\xbf\xdd\x4f\x4f\x72\x14\x27\x14\x49\x82\xa7\xb8\xb8\x18\xfa\xf5\xb9\x24\x36\xf3\x3b\x36\x06\xd5\x67\x4d\x8c\xaa\xa5\xa1\x35\xed\xb9\x13\xd5\x6e\xa7\xff\x1d\x24\x2a\x92\x81\xff\xfa\x6a\x6d\x37\x6b\x03\x60\xdd\xd0\x3d\x1b\x86\x64\x7e\x1e\xda\xbd\x24\xcf\xdf\xa2\x17\x47\xed\x17\x99\x7a\x7f\x02\x00\x00\xff\xff\x69\xac\x99\xb4\x27\x04\x00\x00")

func templatesAppHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppHtml,
		"templates/app.html",
	)
}

func templatesAppHtml() (*asset, error) {
	bytes, err := templatesAppHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app.html", size: 1063, mode: os.FileMode(420), modTime: time.Unix(1506374702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6e\xeb\x20\x10\x87\xf7\x39\x05\xd2\xdb\xe2\x38\xfe\xf3\x22\xc7\x46\xb9\x41\x2f\xd0\x1d\x36\x63\x83\x0a\x8c\x05\xa4\x89\x65\xf9\x22\xdd\xf5\x6a\x3d\x49\x95\x10\x37\x59\xb4\xbb\x19\x7e\x9f\xe0\x63\x86\xc9\x60\xf4\x71\x43\x08\x93\xc0\xc5\xb5\x20\x84\x05\x15\x34\x1c\xbf\x3e\x3e\x5f\xf9\xc8\xd2\xd8\xc5\xc4\x87\x69\xad\x09\x69\x51\x4c\x73\x8f\x36\xd4\x59\x35\x5e\xd2\x6c\x5b\x12\x3f\xf9\x00\x26\x39\x29\xea\xb9\xf5\x89\x07\xa7\xfa\xc6\x70\x37\x28\x5b\xf3\x53\xc0\xc6\xf0\x4b\x72\x56\x22\xc8\x7a\xbf\x03\xb3\x3c\xdd\x44\x47\x07\xf3\xc8\x85\x50\x76\xa8\xb3\x47\x26\x33\x2a\x73\x2a\x0b\x2a\x4b\x2a\xff\x53\xb9\x9f\xb5\xb2\x90\x48\x50\x83\x0c\xb5\x45\x67\xb8\x5e\xd9\xd1\x01\xed\x50\x40\xb4\xda\x56\x60\xc8\x0b\x5a\xde\x21\x35\x68\xd1\x8f\xbc\x83\x06\xdf\xc1\xf5\x1a\xcf\xc9\xe5\x66\xb4\x6c\x9e\x7f\xd3\xf2\xee\x6d\x70\x78\xb2\x22\xe9\x50\xa3\xab\xff\x65\x45\x5e\x14\x55\x73\xef\xda\xb6\x3b\x88\xc3\xdf\x6a\x77\xac\xef\xfb\x95\xe1\x8f\xb3\x2e\x2f\xfb\x27\xd3\xdf\x1e\xdb\xe7\x55\xb9\x8b\x0c\x4b\x7f\x86\xcd\xd2\x75\x39\xec\x6a\x19\xe7\x3f\xcf\x64\x52\xa0\x05\x59\x96\x1b\x12\x13\x96\xc6\x85\x7e\x07\x00\x00\xff\xff\xd5\xf3\x06\xda\xd8\x01\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 472, mode: os.FileMode(420), modTime: time.Unix(1506372726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/502.html": templates502Html,
	"templates/app.html": templatesAppHtml,
	"templates/layout.html": templatesLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"502.html": &bintree{templates502Html, map[string]*bintree{}},
		"app.html": &bintree{templatesAppHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

