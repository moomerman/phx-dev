// Code generated by go-bindata.
// sources:
// templates/502.html
// templates/app.html
// templates/layout.html
// DO NOT EDIT!

package zap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates502Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x7b\x34\x6b\x61\x54\x62\x81\x82\xae\x82\xa9\x81\x91\x82\x53\x62\x8a\x82\x7b\x62\x49\x6a\x79\x62\xa5\x8d\x7e\x86\xa1\x1d\x17\x97\x4d\x81\x5d\x75\xb5\x5e\x6d\xad\x8d\x7e\x81\x1d\x17\x20\x00\x00\xff\xff\x33\x67\x2b\x86\x30\x00\x00\x00")

func templates502HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates502Html,
		"templates/502.html",
	)
}

func templates502Html() (*asset, error) {
	bytes, err := templates502HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/502.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1506372716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x06\x1f\x56\x89\x54\x9c\x2e\x82\x0b\x8d\x73\x00\xad\x28\xa8\x0b\x12\xdb\x03\xe2\x66\x92\x69\x1a\x48\x6d\x13\x4f\x96\x96\xaa\x3f\xc2\x8d\x5f\xe3\x4b\x90\xed\x24\x34\x5b\x04\x97\xaa\x9e\x99\xf7\xfc\xde\x1b\x27\xdb\x5e\xe7\xbf\x7e\xfc\xfc\x28\x0d\x3c\x86\xe3\x11\xf8\x4b\xad\x36\x75\xc5\x97\xda\x12\x9c\x4e\x59\xba\xbd\xce\xa3\x28\x33\xf9\x1d\x49\xea\xec\x73\xc8\xac\x91\x0a\xea\x52\x30\xeb\x2b\x2c\x77\xa8\xd0\xf5\x00\xd7\xcf\xb3\xd4\x78\x58\x8b\x7e\xb4\xd1\x15\xcb\x39\xe7\x59\x6a\x5a\x74\x0d\x5b\xb4\xb5\x21\xa0\x83\x41\xc1\x08\xf7\x94\x7e\x96\xf7\x32\x54\x59\x1e\x01\xdc\xcb\x16\xc2\x05\x20\x80\x4d\xae\x60\x8b\x28\x02\xd8\x74\xaa\xa0\x5a\x2b\xd8\x20\x15\xdb\x95\xae\xe2\x04\x8e\x11\x00\x80\x45\x5a\xd7\x3b\xd4\x1d\xc5\xc3\x50\x9c\x1c\x2b\xa4\x98\xa5\xdf\xa5\x49\x9d\x98\x19\x74\xa6\x94\x84\x2b\x5d\x25\x8b\xd3\x0c\x9e\xcd\xe7\xc9\x22\x02\x38\x4d\xa8\xc7\x99\xb8\x94\x24\x07\xfe\x52\x17\xdd\x0e\x15\xf1\x0a\xe9\xa6\x41\xf7\xf7\xc5\xe1\x75\x19\x7b\x97\x09\xaf\x95\xc2\x76\xb9\xbe\x5d\x81\x00\x07\x5b\x78\xd0\x1f\x95\x97\xd7\xf8\x9e\xb3\x87\xa3\x87\x7a\x03\x71\x6f\xff\x91\x00\xd6\x76\x4a\xd5\xaa\x62\x43\xfb\xff\x26\x1d\x18\x47\x9b\x9e\xdc\x1b\x7d\x32\xef\x9d\x3a\x11\x7f\xf7\x1b\x94\x4c\x1c\x4b\x92\x20\xe0\xcd\xdd\xbb\xb7\xdc\xc8\xd6\xf6\xdd\x40\x53\x68\x65\x75\x83\xbc\x19\x62\x0a\xe5\x71\x79\xae\xc6\xc3\x69\xf1\xef\xfc\xfa\x07\x75\x19\xe1\x04\x7e\x9e\xd6\x65\x96\x2e\x81\xae\x6d\x66\x50\xc8\xa6\xf9\x24\x8b\x2f\x49\xb0\xe0\xde\xd3\x7e\xd7\x6c\x89\x4c\xa0\xe9\x0f\x20\x40\xe1\x37\xf8\x70\xbb\x5a\x12\x99\xf7\xf8\xb5\x43\x4b\x71\x32\x99\xe1\x5a\xb5\x28\xcb\x83\xcf\xb4\xd8\x4a\x55\x21\x08\x38\x8b\xbd\xdf\x89\x5b\xda\x00\xf1\x00\xaf\x12\x84\x80\xa7\x70\x75\x35\xb2\x0d\xc9\x08\xb7\x8c\x11\xec\xa3\xec\x35\x9f\xb1\x58\xa3\x95\xc5\x35\xee\xa9\xd7\x14\xf6\x36\xfc\x8e\x0a\x0d\xaa\x98\xbd\xba\x59\xbb\x95\x3b\xfb\xd4\x76\xf8\xc0\x85\x45\x55\x9e\x47\xf6\x20\xc7\xf3\x17\x9a\xa5\xe1\x53\xcc\xa3\xdf\x01\x00\x00\xff\xff\x3a\xa3\x35\x82\x20\x04\x00\x00")

func templatesAppHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppHtml,
		"templates/app.html",
	)
}

func templatesAppHtml() (*asset, error) {
	bytes, err := templatesAppHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app.html", size: 1056, mode: os.FileMode(420), modTime: time.Unix(1506374088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6e\xeb\x20\x10\x87\xf7\x39\x05\xd2\xdb\xe2\x38\xfe\xf3\x22\xc7\x46\xb9\x41\x2f\xd0\x1d\x36\x63\x83\x0a\x8c\x05\xa4\x89\x65\xf9\x22\xdd\xf5\x6a\x3d\x49\x95\x10\x37\x59\xb4\xbb\x19\x7e\x9f\xe0\x63\x86\xc9\x60\xf4\x71\x43\x08\x93\xc0\xc5\xb5\x20\x84\x05\x15\x34\x1c\xbf\x3e\x3e\x5f\xf9\xc8\xd2\xd8\xc5\xc4\x87\x69\xad\x09\x69\x51\x4c\x73\x8f\x36\xd4\x59\x35\x5e\xd2\x6c\x5b\x12\x3f\xf9\x00\x26\x39\x29\xea\xb9\xf5\x89\x07\xa7\xfa\xc6\x70\x37\x28\x5b\xf3\x53\xc0\xc6\xf0\x4b\x72\x56\x22\xc8\x7a\xbf\x03\xb3\x3c\xdd\x44\x47\x07\xf3\xc8\x85\x50\x76\xa8\xb3\x47\x26\x33\x2a\x73\x2a\x0b\x2a\x4b\x2a\xff\x53\xb9\x9f\xb5\xb2\x90\x48\x50\x83\x0c\xb5\x45\x67\xb8\x5e\xd9\xd1\x01\xed\x50\x40\xb4\xda\x56\x60\xc8\x0b\x5a\xde\x21\x35\x68\xd1\x8f\xbc\x83\x06\xdf\xc1\xf5\x1a\xcf\xc9\xe5\x66\xb4\x6c\x9e\x7f\xd3\xf2\xee\x6d\x70\x78\xb2\x22\xe9\x50\xa3\xab\xff\x65\x45\x5e\x14\x55\x73\xef\xda\xb6\x3b\x88\xc3\xdf\x6a\x77\xac\xef\xfb\x95\xe1\x8f\xb3\x2e\x2f\xfb\x27\xd3\xdf\x1e\xdb\xe7\x55\xb9\x8b\x0c\x4b\x7f\x86\xcd\xd2\x75\x39\xec\x6a\x19\xe7\x3f\xcf\x64\x52\xa0\x05\x59\x96\x1b\x12\x13\x96\xc6\x85\x7e\x07\x00\x00\xff\xff\xd5\xf3\x06\xda\xd8\x01\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 472, mode: os.FileMode(420), modTime: time.Unix(1506372726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/502.html": templates502Html,
	"templates/app.html": templatesAppHtml,
	"templates/layout.html": templatesLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"502.html": &bintree{templates502Html, map[string]*bintree{}},
		"app.html": &bintree{templatesAppHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

